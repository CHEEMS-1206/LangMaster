>>>> 
    A programming language must provide certain core features to be considered a complete and functional language. 
    These features enable developers to write meaningful and efficient programs. 
    Here’s a comprehensive list of fundamental programming features:

1.  Basic Data Handling
        Variables and Constants 
            Storage for data values.
        Data Types 
            Primitive (int, float, char, boolean) and complex (arrays, objects, structs).
        Type System 
            Static or dynamic typing, strong or weak typing.
        Type Conversion 
            Implicit and explicit (casting).

2.  Control Flow
        Conditionals 
            if, else, switch statements.
        Loops 
            for, while, do-while.
        Jump Statements 
            break, continue, goto (in some languages), return.

3.  Functions and Modularity
        Functions (Methods) 
            Defining reusable code blocks.
        Function Parameters and Return Types 
            Passing data in and out of functions.
        Recursion 
            Functions calling themselves.
        Scope & Lifetime
            Local, global, static, dynamic scopes.

4.  Memory & Resource Management
        Heap & Stack Memory 
            Memory allocation and deallocation.
        Garbage Collection 
            Automatic (Java, Python) or manual (C, C++).
        Pointers & References 
            Direct memory access in languages like C/C++.
        Ownership & Borrowing 
            Rust-style memory safety.

5.  Object-Oriented Features (OOP)
        Classes & Objects 
            Creating reusable blueprints.
        Encapsulation 
            Data hiding via access modifiers.
        Inheritance 
            Code reusability across classes.
        Polymorphism 
            Method overloading and overriding.
        Abstraction –
            Hiding implementation details.
        Interfaces & Abstract Classes 
            Contract-based programming.

6.  Concurrency & Parallelism
        Threads & Processes 
            Running multiple tasks simultaneously.
        Synchronization 
            Handling race conditions (locks, mutex, semaphores).
        Asynchronous Execution 
            Async/Await, event-driven programming.
        Concurrency Models 
            Goroutines (Go), Actor Model (Erlang, Akka).

7.  Error Handling & Debugging
        Exception Handling 
            try-catch, throw, finally.
        Assertions 
            Ensuring conditions hold during execution.
        Debugging Tools 
            Breakpoints, step-through execution, profiling tools.

8.  Collections & Data Structures
        Arrays & Lists 
            Storing sequences of elements.
        Sets, Maps (Dictionaries, HashMaps) 
            Key-value pair storage.
        Linked Lists, Trees, Graphs 
            Advanced data structures.            

9.  Input/Output (I/O) Operations
        File Handling 
            Reading and writing files.
        Console I/O 
            Input from users, printing outputs.
        Network I/O 
            Sending and receiving data over networks.

10. String Manipulation
        String Operations 
            Concatenation, slicing, search, replace.
        Regular Expressions 
            Pattern matching.

11. Modular Programming & Code Organization
        Namespaces & Packages 
            Prevent naming conflicts (Java packages, Python modules).
        Modules & Imports 
            Reusing code across files.
        Dependency Management 
            Handling third-party libraries (npm, Maven, pip).

12. Advanced Language Features
        Generics & Templates – 
            Code reusability with type safety.
        Lambda Functions & Closures – 
            Anonymous function expressions.
        Functional Programming Constructs – 
            First-class functions, immutability, pattern matching.

13. Compilation & Interpretation
        Compiled vs. Interpreted Execution 
            C/C++ (compiled), Python (interpreted).
        Just-in-Time (JIT) Compilation 
            Optimized execution (Java, JavaScript).

14. Meta-Programming & Reflection
        Runtime Type Information (RTTI) 
            Checking types at runtime.
        Reflection 
            Inspecting and modifying code structure dynamically.
        Macros & Preprocessors 
            C preprocessor, Rust macros, Lisp macros.

15. Serialization & Deserialization
        Data Encoding Formats 
            JSON, XML, Protocol Buffers.
        Object Serialization 
            Java's Serializable, Python's pickle.

16. Security Features
        Access Modifiers 
            public, private, protected.
        Authentication & Encryption Libraries 
            Secure communication.

17. Low-Level & System Programming Features
        Bitwise Operations 
            Shifts, AND, OR, XOR.
        Inline Assembly Support 
            C, Rust, Zig allow embedding assembly.
        Hardware Interaction 
            Direct memory access, interrupts, device drivers.

18. Web & GUI Programming Support
        Web API Integration 
            HTTP clients, WebSockets.
        GUI Development 
            Native UI toolkits (Qt, Swing, Tkinter).
        Template Engines & Frontend Bindings – 
            JSX (React), Handlebars, Blade.

19. Standard Libraries & Ecosystem
        Comprehensive Standard Library  
            Built-in utilities for I/O, collections, math.
        Tooling Support 
            Build Systems (Make, CMake, Gradle).
        Package Management 
            Centralized repositories (npm, pip, Cargo).

20. Networking & Asynchronous Programming
        Asynchronous Execution – 
            Async/Await (JavaScript, Python, Rust).
        Event Loop & Callbacks – 
            JavaScript’s Node.js event-driven model.
        Concurrency Models –    
            CSP (Go’s goroutines), Actor Model (Erlang, Akka).

********************************************************************************************************************************

In our course we are focusing on 5 langs - 
    1 c++
    2 java
    3 Python 
    4 Javascrit 
    5 Rust

